#!/bin/bash
set -euo pipefail

# Enhanced logging
log() { echo "[$(date +'%Y-%m-%d %H:%M:%S')] $1"; }

# Network connectivity test
test_network_connectivity() {
    log "üåê Testing network connectivity..."
    
    # Test basic internet connectivity
    if ping -c 1 8.8.8.8 >/dev/null 2>&1; then
        log "‚úÖ Basic internet connectivity confirmed"
    else
        log "‚ö†Ô∏è  Basic internet connectivity issues detected"
    fi
    
    # Test DNS resolution
    if nslookup google.com >/dev/null 2>&1; then
        log "‚úÖ DNS resolution working"
    else
        log "‚ö†Ô∏è  DNS resolution issues detected"
    fi
    
    # Test HTTPS connectivity
    if curl --connect-timeout 10 --max-time 30 --silent --head https://www.google.com >/dev/null 2>&1; then
        log "‚úÖ HTTPS connectivity confirmed"
    else
        log "‚ö†Ô∏è  HTTPS connectivity issues detected"
    fi
}

# Enhanced environment validation
validate_environment() {
    log "üîç Validating build environment..."
    
    # Check essential tools
    local tools=("flutter" "java" "gradle" "curl")
    for tool in "${tools[@]}"; do
        if command -v "$tool" >/dev/null 2>&1; then
            log "‚úÖ $tool is available"
        else
            log "‚ö†Ô∏è  $tool is not available"
        fi
    done
    
    # Check Flutter version
    if flutter --version >/dev/null 2>&1; then
        FLUTTER_VERSION=$(flutter --version | head -1)
        log "üì± Flutter version: $FLUTTER_VERSION"
    fi
    
    # Check Java version
    if java -version >/dev/null 2>&1; then
        JAVA_VERSION=$(java -version 2>&1 | head -1)
        log "‚òï Java version: $JAVA_VERSION"
    fi
    
    # Check available disk space
    if command -v df >/dev/null 2>&1; then
        DISK_SPACE=$(df -h . | awk 'NR==2{print $4}')
        log "üíæ Available disk space: $DISK_SPACE"
    fi
    
    # Check available memory
    if command -v free >/dev/null 2>&1; then
        AVAILABLE_MEM=$(free -m | awk 'NR==2{printf "%.0f", $7}')
        log "üß† Available memory: ${AVAILABLE_MEM}MB"
    fi
}

# Main execution function
generate_env_config() {
    log "üöÄ Starting enhanced environment configuration generation..."

    # Test network connectivity
    test_network_connectivity

    # Validate environment
    validate_environment

    # Generate environment config with enhanced error handling
    log "üìù Generating environment configuration..."

    # Create backup of existing config
    if [ -f "lib/config/env_config.dart" ]; then
        cp lib/config/env_config.dart lib/config/env_config.dart.backup
        log "‚úÖ Created backup of existing config"
    fi

    # Generate new config with comprehensive error handling
    cat > lib/config/env_config.dart << 'EOF'
// Generated by gen_env_config.sh - Enhanced version
// Generated at: $(date)
// Build ID: ${CM_BUILD_ID:-unknown}
// Workflow: ${WORKFLOW_ID:-unknown}

class EnvConfig {
  // App Metadata
  static const String appId =
      String.fromEnvironment('APP_ID', defaultValue: '');
  static const String versionName =
      String.fromEnvironment('VERSION_NAME', defaultValue: '1.0.0');
  static const int versionCode =
      int.fromEnvironment('VERSION_CODE', defaultValue: 1);
  static const String appName =
      String.fromEnvironment('APP_NAME', defaultValue: 'QuikApp');
  static const String orgName =
      String.fromEnvironment('ORG_NAME', defaultValue: '');
  static const String webUrl =
      String.fromEnvironment('WEB_URL', defaultValue: '');
  static const String userName =
      String.fromEnvironment('USER_NAME', defaultValue: '');
  static const String emailId =
      String.fromEnvironment('EMAIL_ID', defaultValue: '');
  static const String branch =
      String.fromEnvironment('BRANCH', defaultValue: 'main');
  static const String workflowId =
      String.fromEnvironment('WORKFLOW_ID', defaultValue: '');

  // Package Identifiers
  static const String pkgName =
      String.fromEnvironment('PKG_NAME', defaultValue: '');
  static const String bundleId =
      String.fromEnvironment('BUNDLE_ID', defaultValue: '');

  // Feature Flags
  static const bool pushNotify =
      bool.fromEnvironment('PUSH_NOTIFY', defaultValue: false);
  static const bool isChatbot =
      bool.fromEnvironment('IS_CHATBOT', defaultValue: false);
  static const bool isDomainUrl =
      bool.fromEnvironment('IS_DOMAIN_URL', defaultValue: false);
  static const bool isSplash =
      bool.fromEnvironment('IS_SPLASH', defaultValue: true);
  static const bool isPulldown =
      bool.fromEnvironment('IS_PULLDOWN', defaultValue: true);
  static const bool isBottommenu =
      bool.fromEnvironment('IS_BOTTOMMENU', defaultValue: true);
  static const bool isLoadIndicator =
      bool.fromEnvironment('IS_LOAD_IND', defaultValue: true);

  // Permissions
  static const bool isCamera =
      bool.fromEnvironment('IS_CAMERA', defaultValue: false);
  static const bool isLocation =
      bool.fromEnvironment('IS_LOCATION', defaultValue: false);
  static const bool isMic = bool.fromEnvironment('IS_MIC', defaultValue: false);
  static const bool isNotification =
      bool.fromEnvironment('IS_NOTIFICATION', defaultValue: false);
  static const bool isContact =
      bool.fromEnvironment('IS_CONTACT', defaultValue: false);
  static const bool isBiometric =
      bool.fromEnvironment('IS_BIOMETRIC', defaultValue: false);
  static const bool isCalendar =
      bool.fromEnvironment('IS_CALENDAR', defaultValue: false);
  static const bool isStorage =
      bool.fromEnvironment('IS_STORAGE', defaultValue: false);

  // UI/Branding
  static const String logoUrl =
      String.fromEnvironment('LOGO_URL', defaultValue: '');
  static const String splashUrl =
      String.fromEnvironment('SPLASH_URL', defaultValue: '');
  static const String splashBg =
      String.fromEnvironment('SPLASH_BG_URL', defaultValue: '');
  static const String splashBgColor =
      String.fromEnvironment('SPLASH_BG_COLOR', defaultValue: '#FFFFFF');
  static const String splashTagline =
      String.fromEnvironment('SPLASH_TAGLINE', defaultValue: '');
  static const String splashTaglineColor =
      String.fromEnvironment('SPLASH_TAGLINE_COLOR', defaultValue: '#000000');
  static const String splashAnimation =
      String.fromEnvironment('SPLASH_ANIMATION', defaultValue: 'fade');
  static const int splashDuration =
      int.fromEnvironment('SPLASH_DURATION', defaultValue: 3);

  // Bottom Menu Configuration
  static const String bottommenuItems =
      String.fromEnvironment('BOTTOMMENU_ITEMS', defaultValue: '[]');
  static const String bottommenuBgColor =
      String.fromEnvironment('BOTTOMMENU_BG_COLOR', defaultValue: '#FFFFFF');
  static const String bottommenuIconColor =
      String.fromEnvironment('BOTTOMMENU_ICON_COLOR', defaultValue: '#6d6e8c');
  static const String bottommenuTextColor =
      String.fromEnvironment('BOTTOMMENU_TEXT_COLOR', defaultValue: '#6d6e8c');
  static const String bottommenuFont =
      String.fromEnvironment('BOTTOMMENU_FONT', defaultValue: 'DM Sans');
  static  double bottommenuFontSize =
      double.parse(const String.fromEnvironment('BOTTOMMENU_FONT_SIZE', defaultValue: "12.0"));
  static const bool bottommenuFontBold =
      bool.fromEnvironment('BOTTOMMENU_FONT_BOLD', defaultValue: false);
  static const bool bottommenuFontItalic =
      bool.fromEnvironment('BOTTOMMENU_FONT_ITALIC', defaultValue: false);
  static const String bottommenuActiveTabColor = String.fromEnvironment(
      'BOTTOMMENU_ACTIVE_TAB_COLOR',
      defaultValue: '#a30237');
  static  String bottommenuIconPosition =
      const String.fromEnvironment('BOTTOMMENU_ICON_POSITION', defaultValue: 'above');
  static  String bottommenuVisibleOn = const String.fromEnvironment(
      'BOTTOMMENU_VISIBLE_ON',
      defaultValue: 'home,settings,profile');

  // Firebase Configuration
  static  String firebaseConfigAndroid =
      const String.fromEnvironment('FIREBASE_CONFIG_ANDROID', defaultValue: '');
  static String firebaseConfigIos =
      const String.fromEnvironment('FIREBASE_CONFIG_IOS', defaultValue: '');
}
EOF

    # Validate generated config
    if [ -f "lib/config/env_config.dart" ]; then
        log "‚úÖ Environment configuration generated successfully"
        
        # Check if config is valid Dart
        if command -v dart >/dev/null 2>&1; then
            if dart analyze lib/config/env_config.dart >/dev/null 2>&1; then
                log "‚úÖ Generated config passes Dart analysis"
            else
                log "‚ö†Ô∏è  Generated config has Dart analysis issues"
            fi
        fi
        
        # Show config summary
        log "üìã Configuration Summary:"
        log "   App: ${APP_NAME:-QuikApp} v${VERSION_NAME:-1.0.0}"
        log "   Workflow: ${WORKFLOW_ID:-unknown}"
        log "   Firebase: ${PUSH_NOTIFY:-false}"
        log "   Keystore: ${KEY_STORE_URL:+true}"
        log "   iOS Signing: ${CERT_PASSWORD:+true}"
        
    else
        log "‚ùå Failed to generate environment configuration"
        
        # Restore backup if available
        if [ -f "lib/config/env_config.dart.backup" ]; then
            cp lib/config/env_config.dart.backup lib/config/env_config.dart
            log "‚úÖ Restored backup configuration"
        fi
        
        return 1
    fi

    log "üéâ Enhanced environment configuration generation completed"
    return 0
}

# Run the function if script is called directly
if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
    generate_env_config
    exit $?
fi

#class EnvConfig {
#  // App Metadata
#  static const String appId = String.fromEnvironment('APP_ID', defaultValue: '');
#  static const String versionName = String.fromEnvironment('VERSION_NAME', defaultValue: '1.0.0');
#  static const int versionCode = int.fromEnvironment('VERSION_CODE', defaultValue: 1);
#  static const String appName = String.fromEnvironment('APP_NAME', defaultValue: 'QuikApp');
#  static const String orgName = String.fromEnvironment('ORG_NAME', defaultValue: '');
#  static const String webUrl = String.fromEnvironment('WEB_URL', defaultValue: '');
#  static const String userName = String.fromEnvironment('USER_NAME', defaultValue: '');
#  static const String emailId = String.fromEnvironment('EMAIL_ID', defaultValue: '');
#  static const String branch = String.fromEnvironment('BRANCH', defaultValue: 'main');
#  static const String workflowId = String.fromEnvironment('WORKFLOW_ID', defaultValue: '');
#
#  // Package Identifiers
#  static const String pkgName = String.fromEnvironment('PKG_NAME', defaultValue: '');
#  static const String bundleId = String.fromEnvironment('BUNDLE_ID', defaultValue: '');
#
#  // Feature Flags
#  static const bool pushNotify = bool.fromEnvironment('PUSH_NOTIFY', defaultValue: false);
#  static const bool isChatbot = bool.fromEnvironment('IS_CHATBOT', defaultValue: false);
#  static const bool isDomainUrl = bool.fromEnvironment('IS_DOMAIN_URL', defaultValue: false);
#  static const bool isSplash = bool.fromEnvironment('IS_SPLASH', defaultValue: true);
#  static const bool isPulldown = bool.fromEnvironment('IS_PULLDOWN', defaultValue: true);
#  static const bool isBottommenu = bool.fromEnvironment('IS_BOTTOMMENU', defaultValue: true);
#  static const bool isLoadIndicator = bool.fromEnvironment('IS_LOAD_IND', defaultValue: true);
#
#  // Permissions
#  static const bool isCamera = bool.fromEnvironment('IS_CAMERA', defaultValue: false);
#  static const bool isLocation = bool.fromEnvironment('IS_LOCATION', defaultValue: false);
#  static const bool isMic = bool.fromEnvironment('IS_MIC', defaultValue: false);
#  static const bool isNotification = bool.fromEnvironment('IS_NOTIFICATION', defaultValue: false);
#  static const bool isContact = bool.fromEnvironment('IS_CONTACT', defaultValue: false);
#  static const bool isBiometric = bool.fromEnvironment('IS_BIOMETRIC', defaultValue: false);
#  static const bool isCalendar = bool.fromEnvironment('IS_CALENDAR', defaultValue: false);
#  static const bool isStorage = bool.fromEnvironment('IS_STORAGE', defaultValue: false);
#
#  // UI/Branding
#  static const String logoUrl = String.fromEnvironment('LOGO_URL', defaultValue: '');
#  static const String splashUrl = String.fromEnvironment('SPLASH_URL', defaultValue: '');
#  static const String splashBg = String.fromEnvironment('SPLASH_BG_URL', defaultValue: '');
#  static const String splashBgColor = String.fromEnvironment('SPLASH_BG_COLOR', defaultValue: '#FFFFFF');
#  static const String splashTagline = String.fromEnvironment('SPLASH_TAGLINE', defaultValue: '');
#  static const String splashTaglineColor = String.fromEnvironment('SPLASH_TAGLINE_COLOR', defaultValue: '#000000');
#  static const String splashAnimation = String.fromEnvironment('SPLASH_ANIMATION', defaultValue: 'fade');
#  static const int splashDuration = int.fromEnvironment('SPLASH_DURATION', defaultValue: 3);
#
#  // Bottom Menu Configuration
#  static const String bottommenuItems = String.fromEnvironment('BOTTOMMENU_ITEMS', defaultValue: '[]');
#  static const String bottommenuBgColor = String.fromEnvironment('BOTTOMMENU_BG_COLOR', defaultValue: '#FFFFFF');
#  static const String bottommenuIconColor = String.fromEnvironment('BOTTOMMENU_ICON_COLOR', defaultValue: '#6d6e8c');
#  static const String bottommenuTextColor = String.fromEnvironment('BOTTOMMENU_TEXT_COLOR', defaultValue: '#6d6e8c');
#  static const String bottommenuFont = String.fromEnvironment('BOTTOMMENU_FONT', defaultValue: 'DM Sans');
#  static const double bottommenuFontSize = double.fromEnvironment('BOTTOMMENU_FONT_SIZE', defaultValue: 12.0);
#  static const bool bottommenuFontBold = bool.fromEnvironment('BOTTOMMENU_FONT_BOLD', defaultValue: false);
#  static const bool bottommenuFontItalic = bool.fromEnvironment('BOTTOMMENU_FONT_ITALIC', defaultValue: false);
#  static const String bottommenuActiveTabColor = String.fromEnvironment('BOTTOMMENU_ACTIVE_TAB_COLOR', defaultValue: '#a30237');
#  static const String bottommenuIconPosition = String.fromEnvironment('BOTTOMMENU_ICON_POSITION', defaultValue: 'above');
#  static const String bottommenuVisibleOn = String.fromEnvironment('BOTTOMMENU_VISIBLE_ON', defaultValue: 'home,settings,profile');
#
#  // Firebase Configuration
#  static const String firebaseConfigAndroid = String.fromEnvironment('FIREBASE_CONFIG_ANDROID', defaultValue: '');
#  static const String firebaseConfigIos = String.fromEnvironment('FIREBASE_CONFIG_IOS', defaultValue: '');
#
#  // Android Signing
#  static const String keyStoreUrl = String.fromEnvironment('KEY_STORE_URL', defaultValue: '');
#  static const String cmKeystorePassword = String.fromEnvironment('CM_KEYSTORE_PASSWORD', defaultValue: '');
#  static const String cmKeyAlias = String.fromEnvironment('CM_KEY_ALIAS', defaultValue: '');
#  static const String cmKeyPassword = String.fromEnvironment('CM_KEY_PASSWORD', defaultValue: '');
#
#  // iOS Signing
#  static const String appleTeamId = String.fromEnvironment('APPLE_TEAM_ID', defaultValue: '');
#  static const String apnsKeyId = String.fromEnvironment('APNS_KEY_ID', defaultValue: '');
#  static const String apnsAuthKeyUrl = String.fromEnvironment('APNS_AUTH_KEY_URL', defaultValue: '');
#  static const String certPassword = String.fromEnvironment('CERT_PASSWORD', defaultValue: '');
#  static const String profileUrl = String.fromEnvironment('PROFILE_URL', defaultValue: '');
#  static const String certP12Url = String.fromEnvironment('CERT_P12_URL', defaultValue: '');
#  static const String certCerUrl = String.fromEnvironment('CERT_CER_URL', defaultValue: '');
#  static const String certKeyUrl = String.fromEnvironment('CERT_KEY_URL', defaultValue: '');
#  static const String profileType = String.fromEnvironment('PROFILE_TYPE', defaultValue: 'app-store');
#  static const String appStoreConnectKeyIdentifier = String.fromEnvironment('APP_STORE_CONNECT_KEY_IDENTIFIER', defaultValue: '');
#
#  // Email Configuration
#  static const bool enableEmailNotifications = bool.fromEnvironment('ENABLE_EMAIL_NOTIFICATIONS', defaultValue: false);
#  static const String emailSmtpServer = String.fromEnvironment('EMAIL_SMTP_SERVER', defaultValue: '');
#  static const int emailSmtpPort = int.fromEnvironment('EMAIL_SMTP_PORT', defaultValue: 587);
#  static const String emailSmtpUser = String.fromEnvironment('EMAIL_SMTP_USER', defaultValue: '');
#  static const String emailSmtpPass = String.fromEnvironment('EMAIL_SMTP_PASS', defaultValue: '');
#
#  // Build Environment
#  static const String buildId = String.fromEnvironment('CM_BUILD_ID', defaultValue: 'unknown');
#  static const String buildDir = String.fromEnvironment('CM_BUILD_DIR', defaultValue: '');
#  static const String projectRoot = String.fromEnvironment('PROJECT_ROOT', defaultValue: '');
#  static const String outputDir = String.fromEnvironment('OUTPUT_DIR', defaultValue: 'output');
#
#  // Memory and Performance Settings
#  static const String gradleOpts = String.fromEnvironment('GRADLE_OPTS', defaultValue: '');
#  static const int xcodeParallelJobs = int.fromEnvironment('XCODE_PARALLEL_JOBS', defaultValue: 4);
#  static const String flutterBuildArgs = String.fromEnvironment('FLUTTER_BUILD_ARGS', defaultValue: '');
#
#  // Utility Methods
#  static bool get isAndroidBuild => workflowId.startsWith('android');
#  static bool get isIosBuild => workflowId == 'ios-only';
#  static bool get isCombinedBuild => workflowId == 'combined';
#  static bool get hasFirebase => firebaseConfigAndroid.isNotEmpty || firebaseConfigIos.isNotEmpty;
#  static bool get hasKeystore => keyStoreUrl.isNotEmpty;
#  static bool get hasIosSigning => certPassword.isNotEmpty && profileUrl.isNotEmpty;
#}