#!/bin/bash
set -euo pipefail

# Enhanced logging
log() { echo "[$(date +'%Y-%m-%d %H:%M:%S')] $1"; }

# Network connectivity test
test_network_connectivity() {
    log "üåê Testing network connectivity..."
    
    # Test basic internet connectivity
    if ping -c 1 8.8.8.8 >/dev/null 2>&1; then
        log "‚úÖ Basic internet connectivity confirmed"
    else
        log "‚ö†Ô∏è  Basic internet connectivity issues detected"
    fi
    
    # Test DNS resolution
    if nslookup google.com >/dev/null 2>&1; then
        log "‚úÖ DNS resolution working"
    else
        log "‚ö†Ô∏è  DNS resolution issues detected"
    fi
    
    # Test HTTPS connectivity
    if curl --connect-timeout 10 --max-time 30 --silent --head https://www.google.com >/dev/null 2>&1; then
        log "‚úÖ HTTPS connectivity confirmed"
    else
        log "‚ö†Ô∏è  HTTPS connectivity issues detected"
    fi
}

# Enhanced environment validation
validate_environment() {
    log "üîç Validating build environment..."
    
    # Check essential tools
    local tools=("flutter" "java" "gradle" "curl")
    for tool in "${tools[@]}"; do
        if command -v "$tool" >/dev/null 2>&1; then
            log "‚úÖ $tool is available"
        else
            log "‚ö†Ô∏è  $tool is not available"
        fi
    done
    
    # Check Flutter version
    if flutter --version >/dev/null 2>&1; then
        FLUTTER_VERSION=$(flutter --version | head -1)
        log "üì± Flutter version: $FLUTTER_VERSION"
    fi
    
    # Check Java version
    if java -version >/dev/null 2>&1; then
        JAVA_VERSION=$(java -version 2>&1 | head -1)
        log "‚òï Java version: $JAVA_VERSION"
    fi
    
    # Check available disk space
    if command -v df >/dev/null 2>&1; then
        DISK_SPACE=$(df -h . | awk 'NR==2{print $4}')
        log "üíæ Available disk space: $DISK_SPACE"
    fi
    
    # Check available memory
    if command -v free >/dev/null 2>&1; then
        AVAILABLE_MEM=$(free -m | awk 'NR==2{printf "%.0f", $7}')
        log "üß† Available memory: ${AVAILABLE_MEM}MB"
    fi
}

# Main execution
log "üöÄ Starting enhanced environment configuration generation..."

# Test network connectivity
test_network_connectivity

# Validate environment
validate_environment

# Generate environment config with enhanced error handling
log "üìù Generating environment configuration..."

# Create backup of existing config
if [ -f "lib/config/env_config.dart" ]; then
    cp lib/config/env_config.dart lib/config/env_config.dart.backup
    log "‚úÖ Created backup of existing config"
fi

# Generate new config with comprehensive error handling
cat > lib/config/env_config.dart << 'EOF'
// Generated by gen_env_config.sh - Enhanced version
// Generated at: $(date)
// Build ID: ${CM_BUILD_ID:-unknown}
// Workflow: ${WORKFLOW_ID:-unknown}

class EnvConfig {
  // App Metadata
  static const String appId = '${APP_ID:-}';
  static const String versionName = '${VERSION_NAME:-1.0.0}';
  static const int versionCode = ${VERSION_CODE:-1};
  static const String appName = '${APP_NAME:-QuikApp}';
  static const String orgName = '${ORG_NAME:-}';
  static const String webUrl = '${WEB_URL:-}';
  static const String userName = '${USER_NAME:-}';
  static const String emailId = '${EMAIL_ID:-}';
  static const String branch = '${BRANCH:-main}';
  static const String workflowId = '${WORKFLOW_ID:-}';

  // Package Identifiers
  static const String pkgName = '${PKG_NAME:-}';
  static const String bundleId = '${BUNDLE_ID:-}';

  // Feature Flags
  static const bool pushNotify = ${PUSH_NOTIFY:-false};
  static const bool isChatbot = ${IS_CHATBOT:-false};
  static const bool isDomainUrl = ${IS_DOMAIN_URL:-false};
  static const bool isSplash = ${IS_SPLASH:-false};
  static const bool isPulldown = ${IS_PULLDOWN:-false};
  static const bool isBottomMenu = ${IS_BOTTOMMENU:-false};
  static const bool isLoadInd = ${IS_LOAD_IND:-false};

  // Permissions
  static const bool isCamera = ${IS_CAMERA:-false};
  static const bool isLocation = ${IS_LOCATION:-false};
  static const bool isMic = ${IS_MIC:-false};
  static const bool isNotification = ${IS_NOTIFICATION:-false};
  static const bool isContact = ${IS_CONTACT:-false};
  static const bool isBiometric = ${IS_BIOMETRIC:-false};
  static const bool isCalendar = ${IS_CALENDAR:-false};
  static const bool isStorage = ${IS_STORAGE:-false};

  // Assets
  static const String logoUrl = '${LOGO_URL:-}';
  static const String splashUrl = '${SPLASH_URL:-}';
  static const String splashBgUrl = '${SPLASH_BG_URL:-}';
  static const String splashBgColor = '${SPLASH_BG_COLOR:-}';
  static const String splashTagline = '${SPLASH_TAGLINE:-}';
  static const String splashTaglineColor = '${SPLASH_TAGLINE_COLOR:-}';
  static const String splashAnimation = '${SPLASH_ANIMATION:-}';
  static const int splashDuration = ${SPLASH_DURATION:-3000};

  // Firebase Configuration
  static const String firebaseConfigAndroid = '${FIREBASE_CONFIG_ANDROID:-}';
  static const String firebaseConfigIos = '${FIREBASE_CONFIG_IOS:-}';

  // Android Signing
  static const String keyStoreUrl = '${KEY_STORE_URL:-}';
  static const String cmKeystorePassword = '${CM_KEYSTORE_PASSWORD:-}';
  static const String cmKeyAlias = '${CM_KEY_ALIAS:-}';
  static const String cmKeyPassword = '${CM_KEY_PASSWORD:-}';

  // iOS Signing
  static const String appleTeamId = '${APPLE_TEAM_ID:-}';
  static const String apnsKeyId = '${APNS_KEY_ID:-}';
  static const String apnsAuthKeyUrl = '${APNS_AUTH_KEY_URL:-}';
  static const String certPassword = '${CERT_PASSWORD:-}';
  static const String profileUrl = '${PROFILE_URL:-}';
  static const String certP12Url = '${CERT_P12_URL:-}';
  static const String certCerUrl = '${CERT_CER_URL:-}';
  static const String certKeyUrl = '${CERT_KEY_URL:-}';
  static const String profileType = '${PROFILE_TYPE:-app-store}';
  static const String appStoreConnectKeyIdentifier = '${APP_STORE_CONNECT_KEY_IDENTIFIER:-}';

  // Email Configuration
  static const bool enableEmailNotifications = ${ENABLE_EMAIL_NOTIFICATIONS:-false};
  static const String emailSmtpServer = '${EMAIL_SMTP_SERVER:-}';
  static const int emailSmtpPort = ${EMAIL_SMTP_PORT:-587};
  static const String emailSmtpUser = '${EMAIL_SMTP_USER:-}';
  static const String emailSmtpPass = '${EMAIL_SMTP_PASS:-}';

  // Build Environment
  static const String buildId = '${CM_BUILD_ID:-unknown}';
  static const String buildDir = '${CM_BUILD_DIR:-}';
  static const String projectRoot = '${PROJECT_ROOT:-}';
  static const String outputDir = '${OUTPUT_DIR:-output}';

  // Memory and Performance Settings
  static const String gradleOpts = '${GRADLE_OPTS:-}';
  static const int xcodeParallelJobs = ${XCODE_PARALLEL_JOBS:-4};
  static const String flutterBuildArgs = '${FLUTTER_BUILD_ARGS:-}';

  // Utility Methods
  static bool get isAndroidBuild => workflowId.startsWith('android');
  static bool get isIosBuild => workflowId == 'ios-only';
  static bool get isCombinedBuild => workflowId == 'combined';
  static bool get hasFirebase => firebaseConfigAndroid.isNotEmpty || firebaseConfigIos.isNotEmpty;
  static bool get hasKeystore => keyStoreUrl.isNotEmpty;
  static bool get hasIosSigning => certPassword.isNotEmpty && profileUrl.isNotEmpty;
}
EOF

# Validate generated config
if [ -f "lib/config/env_config.dart" ]; then
    log "‚úÖ Environment configuration generated successfully"
    
    # Check if config is valid Dart
    if command -v dart >/dev/null 2>&1; then
        if dart analyze lib/config/env_config.dart >/dev/null 2>&1; then
            log "‚úÖ Generated config passes Dart analysis"
        else
            log "‚ö†Ô∏è  Generated config has Dart analysis issues"
        fi
    fi
    
    # Show config summary
    log "üìã Configuration Summary:"
    log "   App: ${APP_NAME:-QuikApp} v${VERSION_NAME:-1.0.0}"
    log "   Workflow: ${WORKFLOW_ID:-unknown}"
    log "   Firebase: ${PUSH_NOTIFY:-false}"
    log "   Keystore: ${KEY_STORE_URL:+true}"
    log "   iOS Signing: ${CERT_PASSWORD:+true}"
    
else
    log "‚ùå Failed to generate environment configuration"
    
    # Restore backup if available
    if [ -f "lib/config/env_config.dart.backup" ]; then
        cp lib/config/env_config.dart.backup lib/config/env_config.dart
        log "‚úÖ Restored backup configuration"
    fi
    
    exit 1
fi

log "üéâ Enhanced environment configuration generation completed"
exit 0