#!/bin/bash
set -euo pipefail

log() { echo "[$(date +'%Y-%m-%d %H:%M:%S')] $1"; }

log "üöÄ Starting dynamic Podfile generation..."

# Validate required environment variables
REQUIRED_VARS=("APPLE_TEAM_ID" "BUNDLE_ID" "PROFILE_TYPE")
for VAR in "${REQUIRED_VARS[@]}"; do
    if [ -z "${!VAR:-}" ]; then
        log "‚ùå Missing required variable: $VAR"
        exit 1
    fi
    log "‚úÖ $VAR: ${!VAR}"
done

# Set default values for optional variables
PROFILE_NAME="${PROFILE_NAME:-Twinklub App Store}"
CODE_SIGN_IDENTITY="${CODE_SIGN_IDENTITY:-Apple Distribution}"
KEYCHAIN_NAME="${KEYCHAIN_NAME:-build.keychain}"

log "üìã Configuration:"
log "   Team ID: $APPLE_TEAM_ID"
log "   Bundle ID: $BUNDLE_ID"
log "   Profile Type: $PROFILE_TYPE"
log "   Profile Name: $PROFILE_NAME"
log "   Code Sign Identity: $CODE_SIGN_IDENTITY"

# Create backup of existing Podfile
if [ -f ios/Podfile ]; then
    cp ios/Podfile ios/Podfile.backup
    log "‚úÖ Backed up existing Podfile"
fi

# Generate dynamic Podfile
log "üìù Generating dynamic Podfile..."

cat > ios/Podfile << 'EOF'
# üöÄ DYNAMICALLY GENERATED PODFILE - DO NOT EDIT MANUALLY
# Generated by lib/scripts/ios/generate_podfile.sh
# This file is automatically generated with environment-specific variables

# Uncomment this line to define a global platform for your project
platform :ios, '13.0'

# CocoaPods analytics sends network stats synchronously affecting flutter build latency.
ENV['COCOAPODS_DISABLE_STATS'] = 'true'

project 'Runner', {
  'Debug' => :debug,
  'Profile' => :release,
  'Release' => :release,
}

def flutter_root
  generated_xcode_build_settings_path = File.expand_path(File.join('..', 'Flutter', 'Generated.xcconfig'), __FILE__)
  unless File.exist?(generated_xcode_build_settings_path)
    raise "#{generated_xcode_build_settings_path} must exist. If you're running pod install manually, make sure flutter pub get is executed first"
  end

  File.foreach(generated_xcode_build_settings_path) do |line|
    matches = line.match(/FLUTTER_ROOT\=(.*)/)
    return matches[1].strip if matches
  end
  raise "FLUTTER_ROOT not found in #{generated_xcode_build_settings_path}. Try deleting Generated.xcconfig, then run flutter pub get"
end

require File.expand_path(File.join('packages', 'flutter_tools', 'bin', 'podhelper'), flutter_root)

flutter_ios_podfile_setup

target 'Runner' do
  use_frameworks!
  use_modular_headers!

  flutter_install_all_ios_pods File.dirname(File.realpath(__FILE__))

  target 'RunnerTests' do
    inherit! :search_paths
  end
end

post_install do |installer|
  installer.pods_project.targets.each do |target|
    flutter_additional_ios_build_settings(target)
    
    # üîß Ensure deployment target is set correctly for Firebase compatibility
    target.build_configurations.each do |config|
      config.build_settings['IPHONEOS_DEPLOYMENT_TARGET'] = '13.0'
      config.build_settings['ENABLE_BITCODE'] = 'NO'
      config.build_settings['ONLY_ACTIVE_ARCH'] = 'YES'
      
      # üîê Dynamic signing configuration
      if ENV['CODE_SIGN_STYLE'] == 'Manual'
        config.build_settings['CODE_SIGN_STYLE'] = 'Manual'
        config.build_settings['DEVELOPMENT_TEAM'] = ENV['APPLE_TEAM_ID']
        config.build_settings['PROVISIONING_PROFILE_SPECIFIER'] = ENV['PROFILE_NAME']
        config.build_settings['CODE_SIGN_IDENTITY'] = ENV['CODE_SIGN_IDENTITY']
        config.build_settings['CODE_SIGNING_REQUIRED'] = 'YES'
        config.build_settings['CODE_SIGNING_ALLOWED'] = 'YES'
        config.build_settings['EXPANDED_CODE_SIGN_IDENTITY'] = ENV['CODE_SIGN_IDENTITY']
        config.build_settings['CODE_SIGN_INJECT_BASE_ENTITLEMENTS'] = 'YES'
        config.build_settings['CODE_SIGN_ENTITLEMENTS'] = 'Runner/Runner.entitlements'
        config.build_settings['PRODUCT_BUNDLE_IDENTIFIER'] = ENV['BUNDLE_ID']
        
        # üîë Keychain configuration if available
        if ENV['KEYCHAIN_NAME']
          config.build_settings['OTHER_CODE_SIGN_FLAGS'] = "--keychain $HOME/Library/Keychains/#{ENV['KEYCHAIN_NAME']}-db"
        end
        
        # üì± Profile type specific settings
        case ENV['PROFILE_TYPE']
        when 'app-store'
          config.build_settings['CODE_SIGN_IDENTITY'] = 'Apple Distribution'
          config.build_settings['PROVISIONING_PROFILE_SPECIFIER'] = ENV['PROFILE_NAME']
        when 'ad-hoc'
          config.build_settings['CODE_SIGN_IDENTITY'] = 'Apple Distribution'
          config.build_settings['PROVISIONING_PROFILE_SPECIFIER'] = ENV['PROFILE_NAME']
        when 'enterprise'
          config.build_settings['CODE_SIGN_IDENTITY'] = 'Apple Distribution'
          config.build_settings['PROVISIONING_PROFILE_SPECIFIER'] = ENV['PROFILE_NAME']
        when 'development'
          config.build_settings['CODE_SIGN_IDENTITY'] = 'Apple Development'
          config.build_settings['PROVISIONING_PROFILE_SPECIFIER'] = ENV['PROFILE_NAME']
        end
      end
    end
  end
end
EOF

log "‚úÖ Dynamic Podfile generated successfully"

# Display generated Podfile for verification
log "üìã Generated Podfile contents:"
echo "=========================================="
cat ios/Podfile
echo "=========================================="

# Verify the generated file
if [ -f ios/Podfile ]; then
    log "‚úÖ Podfile verification passed"
    log "üìÅ File size: $(wc -l < ios/Podfile) lines"
else
    log "‚ùå Podfile generation failed"
    exit 1
fi

log "üéâ Dynamic Podfile generation completed successfully!" 