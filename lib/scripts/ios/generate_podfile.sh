#!/bin/bash
set -euo pipefail

log() { echo "[$(date +'%Y-%m-%d %H:%M:%S')] $1"; }

log "🚀 Starting dynamic Podfile generation..."

# Validate required environment variables
REQUIRED_VARS=("APPLE_TEAM_ID" "BUNDLE_ID" "PROFILE_TYPE")
for VAR in "${REQUIRED_VARS[@]}"; do
    if [ -z "${!VAR:-}" ]; then
        log "❌ Missing required variable: $VAR"
        exit 1
    fi
    log "✅ $VAR: ${!VAR}"
done

# Validate profile type
case "$PROFILE_TYPE" in
    "app-store"|"ad-hoc"|"enterprise")
        log "✅ Valid profile type: $PROFILE_TYPE"
        ;;
    *)
        log "❌ Invalid profile type: $PROFILE_TYPE"
        log "   Supported types: app-store, ad-hoc, enterprise"
        exit 1
        ;;
esac

# Set default values for optional variables
PROFILE_NAME="${PROFILE_NAME:-Twinklub App Store}"
CODE_SIGN_IDENTITY="${CODE_SIGN_IDENTITY:-Apple Distribution}"
KEYCHAIN_NAME="${KEYCHAIN_NAME:-build.keychain}"

log "📋 Configuration:"
log "   Team ID: $APPLE_TEAM_ID"
log "   Bundle ID: $BUNDLE_ID"
log "   Profile Type: $PROFILE_TYPE"
log "   Profile Name: $PROFILE_NAME"
log "   Code Sign Identity: $CODE_SIGN_IDENTITY"

# Get current directory for Flutter root detection
CURRENT_DIR=$(pwd)

# Function to generate Podfile for specific stage and profile type
generate_podfile() {
    local STAGE=$1
    local PROFILE_TYPE=$2
    
    log "📝 Generating Podfile for stage: $STAGE, profile: $PROFILE_TYPE"
    
    # Ensure ios directory exists
    mkdir -p ios
    
    # Create backup of existing Podfile
    if [ -f "ios/Podfile" ]; then
        cp ios/Podfile ios/Podfile.backup.$(date +%Y%m%d_%H%M%S)
        log "✅ Created backup of existing Podfile"
    fi
    
    # Generate dynamic Podfile based on stage and profile type
    cat > ios/Podfile << EOF
# 🚀 DYNAMICALLY GENERATED PODFILE - DO NOT EDIT MANUALLY
# Generated by lib/scripts/ios/generate_podfile.sh
# This file is automatically generated with environment-specific variables

# Uncomment this line to define a global platform for your project
platform :ios, '13.0'

# CocoaPods analytics sends network stats synchronously affecting flutter build latency.
ENV['COCOAPODS_DISABLE_STATS'] = 'true'

project 'Runner', {
  'Debug' => :debug,
  'Profile' => :release,
  'Release' => :release,
}

def flutter_root
  generated_xcode_build_settings_path = File.expand_path(File.join('..', 'Flutter', 'Generated.xcconfig'), __FILE__)
  unless File.exist?(generated_xcode_build_settings_path)
    raise "#{generated_xcode_build_settings_path} must exist. If you're running pod install manually, make sure flutter pub get is executed first"
  end

  File.foreach(generated_xcode_build_settings_path) do |line|
    matches = line.match(/FLUTTER_ROOT\\=(.*)/)
    return matches[1].strip if matches
  end
  raise "FLUTTER_ROOT not found in #{generated_xcode_build_settings_path}. Try deleting Generated.xcconfig, then run flutter pub get"
end

require File.expand_path(File.join('packages', 'flutter_tools', 'bin', 'podhelper'), flutter_root)

flutter_ios_podfile_setup

target 'Runner' do
  use_frameworks!
  use_modular_headers!

  flutter_install_all_ios_pods File.dirname(File.realpath(__FILE__))

  target 'RunnerTests' do
    inherit! :search_paths
  end
EOF

    # Add profile-specific configuration
    case "$PROFILE_TYPE" in
        "app-store")
            cat >> ios/Podfile << EOF

  # App Store Configuration
  post_install do |installer|
    installer.pods_project.targets.each do |target|
      flutter_additional_ios_build_settings(target)
      target.build_configurations.each do |config|
        config.build_settings['IPHONEOS_DEPLOYMENT_TARGET'] = '13.0'
        config.build_settings['ENABLE_BITCODE'] = 'NO'
        config.build_settings['ONLY_ACTIVE_ARCH'] = 'NO'
        config.build_settings['CODE_SIGN_STYLE'] = 'Manual'
        config.build_settings['DEVELOPMENT_TEAM'] = '$APPLE_TEAM_ID'
        config.build_settings['PROVISIONING_PROFILE_SPECIFIER'] = '$PROFILE_NAME'
        config.build_settings['CODE_SIGN_IDENTITY'] = '$CODE_SIGN_IDENTITY'
        config.build_settings['CODE_SIGNING_ALLOWED'] = 'NO'
        config.build_settings['CODE_SIGNING_REQUIRED'] = 'NO'
      end
    end
  end
EOF
            ;;
        "ad-hoc")
            cat >> ios/Podfile << EOF

  # Ad-Hoc Configuration
  post_install do |installer|
    installer.pods_project.targets.each do |target|
      flutter_additional_ios_build_settings(target)
      target.build_configurations.each do |config|
        config.build_settings['IPHONEOS_DEPLOYMENT_TARGET'] = '13.0'
        config.build_settings['ENABLE_BITCODE'] = 'NO'
        config.build_settings['ONLY_ACTIVE_ARCH'] = 'NO'
        config.build_settings['CODE_SIGN_STYLE'] = 'Manual'
        config.build_settings['DEVELOPMENT_TEAM'] = '$APPLE_TEAM_ID'
        config.build_settings['PROVISIONING_PROFILE_SPECIFIER'] = '$PROFILE_NAME'
        config.build_settings['CODE_SIGN_IDENTITY'] = '$CODE_SIGN_IDENTITY'
        config.build_settings['CODE_SIGNING_ALLOWED'] = 'NO'
        config.build_settings['CODE_SIGNING_REQUIRED'] = 'NO'
        config.build_settings['ENABLE_TESTABILITY'] = 'YES'
      end
    end
  end
EOF
            ;;
        "enterprise")
            cat >> ios/Podfile << EOF

  # Enterprise Configuration
  post_install do |installer|
    installer.pods_project.targets.each do |target|
      flutter_additional_ios_build_settings(target)
      target.build_configurations.each do |config|
        config.build_settings['IPHONEOS_DEPLOYMENT_TARGET'] = '13.0'
        config.build_settings['ENABLE_BITCODE'] = 'NO'
        config.build_settings['ONLY_ACTIVE_ARCH'] = 'NO'
        config.build_settings['CODE_SIGN_STYLE'] = 'Manual'
        config.build_settings['DEVELOPMENT_TEAM'] = '$APPLE_TEAM_ID'
        config.build_settings['PROVISIONING_PROFILE_SPECIFIER'] = '$PROFILE_NAME'
        config.build_settings['CODE_SIGN_IDENTITY'] = '$CODE_SIGN_IDENTITY'
        config.build_settings['CODE_SIGNING_ALLOWED'] = 'NO'
        config.build_settings['CODE_SIGNING_REQUIRED'] = 'NO'
        config.build_settings['ENABLE_TESTABILITY'] = 'YES'
      end
    end
  end
EOF
            ;;
    esac

    cat >> ios/Podfile << EOF
end
EOF

    log "✅ Podfile generated for $STAGE stage with $PROFILE_TYPE profile"
    log "📄 Podfile contents:"
    cat ios/Podfile
}

# Generate Podfile for current stage
STAGE="${PODFILE_STAGE:-flutter-build}"
generate_podfile "$STAGE" "$PROFILE_TYPE"

log "🎉 Dynamic Podfile generation completed successfully!"
log "📁 Podfile location: ios/Podfile"
log "🔧 Profile Type: $PROFILE_TYPE"
log "🏢 Team ID: $APPLE_TEAM_ID" 