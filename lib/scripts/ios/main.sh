#!/bin/bash
set -euo pipefail

# Source environment variables
source lib/scripts/utils/gen_env_config.sh

# Initialize logging
log() { echo "[$(date +'%Y-%m-%d %H:%M:%S')] $1"; }

# Error handling with email notification
trap 'handle_error $LINENO $?' ERR

handle_error() {
    local line_no=$1
    local exit_code=$2
    local error_msg="Error occurred at line $line_no. Exit code: $exit_code"
    
    log "‚ùå $error_msg"
    
    # Send build failed email
    if [ -f "lib/scripts/utils/send_email.sh" ]; then
        chmod +x lib/scripts/utils/send_email.sh
        lib/scripts/utils/send_email.sh "build_failed" "iOS" "${CM_BUILD_ID:-unknown}" "$error_msg" || true
    fi
    
    exit $exit_code
}

log "üöÄ Starting iOS build process..."

# Send build started email
if [ -f "lib/scripts/utils/send_email.sh" ]; then
    chmod +x lib/scripts/utils/send_email.sh
    lib/scripts/utils/send_email.sh "build_started" "iOS" "${CM_BUILD_ID:-unknown}" || true
fi

# Create necessary directories
mkdir -p ios/certificates
mkdir -p output/ios

# Step 1: Download certificate files (unencrypted)
log "üì• Downloading certificate files (unencrypted)..."

if [ -n "${CERT_CER_URL:-}" ]; then
    log "Downloading certificate from: $CERT_CER_URL"
    if curl -L -o ios/certificates/cert.cer "$CERT_CER_URL"; then
        log "‚úÖ Certificate downloaded successfully"
    else
        log "‚ùå Failed to download certificate"
        exit 1
    fi
else
    log "‚ùå CERT_CER_URL is required for iOS signing"
    exit 1
fi

if [ -n "${CERT_KEY_URL:-}" ]; then
    log "Downloading private key from: $CERT_KEY_URL"
    if curl -L -o ios/certificates/cert.key "$CERT_KEY_URL"; then
        log "‚úÖ Private key downloaded successfully"
    else
        log "‚ùå Failed to download private key"
        exit 1
    fi
else
    log "‚ùå CERT_KEY_URL is required for iOS signing"
    exit 1
fi

if [ -n "${PROFILE_URL:-}" ]; then
    log "Downloading provisioning profile from: $PROFILE_URL"
    if curl -L -o ios/certificates/profile.mobileprovision "$PROFILE_URL"; then
        log "‚úÖ Provisioning profile downloaded successfully"
    else
        log "‚ùå Failed to download provisioning profile"
        exit 1
    fi
else
    log "‚ùå PROFILE_URL is required for iOS signing"
    exit 1
fi

# Step 2: Validate required variables
log "üîç Validating required variables..."

required_vars=(
    "CERT_PASSWORD"
    "APPLE_TEAM_ID"
    "APNS_KEY_ID"
    "APNS_AUTH_KEY_URL"
    "APP_STORE_CONNECT_KEY_IDENTIFIER"
)

for var in "${required_vars[@]}"; do
    if [ -z "${!var:-}" ]; then
        log "‚ùå Required variable $var is missing"
        exit 1
    fi
done

# Step 3: Process certificates and create P12
log "üîê Processing certificates and creating P12 file..."
if [ -f "lib/scripts/ios/certificate_handler.sh" ]; then
    chmod +x lib/scripts/ios/certificate_handler.sh
    if lib/scripts/ios/certificate_handler.sh \
        "ios/certificates/cert.cer" \
        "ios/certificates/cert.key" \
        "$CERT_PASSWORD" \
        "ios/certificates/cert.p12"; then
        log "‚úÖ Certificate processing completed"
    else
        log "‚ùå Certificate processing failed"
        exit 1
    fi
else
    log "‚ùå Certificate handler script not found"
    exit 1
fi

# Step 4: Install provisioning profile
log "üì± Installing provisioning profile..."
if [ -f "ios/certificates/profile.mobileprovision" ]; then
    mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles/
    cp ios/certificates/profile.mobileprovision ~/Library/MobileDevice/Provisioning\ Profiles/
    log "‚úÖ Provisioning profile installed"
else
    log "‚ùå Provisioning profile not found"
    exit 1
fi

# Step 5: Download APNS auth key
log "üîë Downloading APNS auth key..."
if [ -n "${APNS_AUTH_KEY_URL:-}" ]; then
    if curl -L -o ios/certificates/AuthKey_${APNS_KEY_ID}.p8 "$APNS_AUTH_KEY_URL"; then
        log "‚úÖ APNS auth key downloaded"
    else
        log "‚ùå Failed to download APNS auth key"
        exit 1
    fi
else
    log "‚ùå APNS_AUTH_KEY_URL is required"
    exit 1
fi

# Step 6: Run branding script
log "üé® Running branding script..."
if [ -f "lib/scripts/ios/branding.sh" ]; then
    chmod +x lib/scripts/ios/branding.sh
    if lib/scripts/ios/branding.sh; then
        log "‚úÖ Branding completed"
    else
        log "‚ùå Branding failed"
        exit 1
    fi
else
    log "‚ö†Ô∏è  Branding script not found, skipping..."
fi

# Step 7: Run customization script
log "‚öôÔ∏è  Running customization script..."
if [ -f "lib/scripts/ios/customization.sh" ]; then
    chmod +x lib/scripts/ios/customization.sh
    if lib/scripts/ios/customization.sh; then
        log "‚úÖ Customization completed"
    else
        log "‚ùå Customization failed"
        exit 1
    fi
else
    log "‚ö†Ô∏è  Customization script not found, skipping..."
fi

# Step 8: Run permissions script
log "üîí Running permissions script..."
if [ -f "lib/scripts/ios/permissions.sh" ]; then
    chmod +x lib/scripts/ios/permissions.sh
    if lib/scripts/ios/permissions.sh; then
        log "‚úÖ Permissions configured"
    else
        log "‚ùå Permissions configuration failed"
        exit 1
    fi
else
    log "‚ö†Ô∏è  Permissions script not found, skipping..."
fi

# Step 9: Run deployment target script
log "üì± Setting deployment target..."
if [ -f "lib/scripts/ios/deployment_target.sh" ]; then
    chmod +x lib/scripts/ios/deployment_target.sh
    if lib/scripts/ios/deployment_target.sh; then
        log "‚úÖ Deployment target set"
    else
        log "‚ùå Deployment target setting failed"
        exit 1
    fi
else
    log "‚ö†Ô∏è  Deployment target script not found, skipping..."
fi

# Step 10: Run Firebase script
log "üî• Running Firebase script..."
if [ -f "lib/scripts/ios/firebase.sh" ]; then
    chmod +x lib/scripts/ios/firebase.sh
    if lib/scripts/ios/firebase.sh; then
        log "‚úÖ Firebase configuration completed"
    else
        log "‚ùå Firebase configuration failed"
        exit 1
    fi
else
    log "‚ö†Ô∏è  Firebase script not found, skipping..."
fi

# Step 11: Update Podfile for Firebase compatibility
log "üì¶ Updating Podfile for Firebase compatibility..."
if [ -f "ios/Podfile" ]; then
    # Add Firebase compatibility settings
    cat >> ios/Podfile << 'EOF'

# Firebase compatibility settings
post_install do |installer|
  installer.pods_project.targets.each do |target|
    target.build_configurations.each do |config|
      config.build_settings['IPHONEOS_DEPLOYMENT_TARGET'] = '12.0'
      config.build_settings['ENABLE_BITCODE'] = 'NO'
      config.build_settings['SWIFT_VERSION'] = '5.0'
      config.build_settings['CLANG_WARN_QUOTED_INCLUDE_IN_FRAMEWORK_HEADER'] = 'NO'
    end
  end
end
EOF
    log "‚úÖ Podfile updated"
else
    log "‚ùå Podfile not found"
    exit 1
fi

# Step 12: Flutter setup (CRITICAL - must come before pod install)
log "üì¶ Setting up Flutter dependencies..."
if flutter doctor; then
    log "‚úÖ Flutter doctor check completed"
else
    log "‚ö†Ô∏è  Flutter doctor had warnings (continuing anyway)"
fi

log "üì¶ Running flutter pub get..."
if flutter pub get; then
    log "‚úÖ Flutter dependencies installed"
else
    log "‚ùå Failed to install Flutter dependencies"
    exit 1
fi

log "üì¶ Running flutter precache --ios..."
if flutter precache --ios; then
    log "‚úÖ Flutter iOS artifacts cached"
else
    log "‚ö†Ô∏è  Flutter precache had warnings (continuing anyway)"
fi

# Step 13: Install pods (now that Flutter dependencies are ready)
log "üì¶ Installing CocoaPods dependencies..."
cd ios
if pod install --repo-update; then
    log "‚úÖ CocoaPods dependencies installed"
else
    log "‚ùå CocoaPods installation failed"
    exit 1
fi
cd ..

# Step 14: Build and export IPA
log "üèóÔ∏è  Building iOS app..."

# Determine if we should build signed or unsigned
BUILD_SIGNED=true
if ! security find-identity -v -p codesigning build.keychain 2>/dev/null | grep -q "iPhone Distribution"; then
    log "‚ö†Ô∏è  No valid signing identity found, attempting unsigned build"
    BUILD_SIGNED=false
fi

# Create export options plist
cat > ios/ExportOptions.plist << EOF
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
    <key>method</key>
    <string>${PROFILE_TYPE:-app-store}</string>
    <key>teamID</key>
    <string>$APPLE_TEAM_ID</string>
    <key>signingStyle</key>
    <string>manual</string>
    <key>provisioningProfiles</key>
    <dict>
        <key>$BUNDLE_ID</key>
        <string>$(basename ios/certificates/profile.mobileprovision .mobileprovision)</string>
    </dict>
    <key>compileBitcode</key>
    <false/>
    <key>uploadBitcode</key>
    <false/>
    <key>uploadSymbols</key>
    <false/>
</dict>
</plist>
EOF

# Build the app
cd ios
if [ "$BUILD_SIGNED" = true ]; then
    log "Building with code signing..."
    if xcodebuild -workspace Runner.xcworkspace -scheme Runner -configuration Release -destination generic/platform=iOS -archivePath build/Runner.xcarchive archive; then
        log "‚úÖ Archive created successfully"
        
        if xcodebuild -exportArchive -archivePath build/Runner.xcarchive -exportPath build/ -exportOptionsPlist ExportOptions.plist; then
            log "‚úÖ IPA exported successfully"
            cp build/Runner.ipa ../output/ios/
        else
            log "‚ùå IPA export failed"
            exit 1
        fi
    else
        log "‚ùå Archive creation failed"
        exit 1
    fi
else
    log "Building without code signing..."
    if flutter build ios --release --no-codesign; then
        log "‚úÖ Unsigned build completed"
        # Create a simple IPA structure for unsigned build
        mkdir -p Payload/Runner.app
        cp -r build/ios/Release-iphoneos/Runner.app Payload/
        zip -r ../output/ios/Runner-unsigned.ipa Payload/
        rm -rf Payload
    else
        log "‚ùå Unsigned build failed"
        exit 1
    fi
fi
cd ..

# Step 15: Generate environment config
log "‚öôÔ∏è  Generating environment configuration..."
if [ -f "lib/scripts/utils/gen_env_config.sh" ]; then
    chmod +x lib/scripts/utils/gen_env_config.sh
    if lib/scripts/utils/gen_env_config.sh; then
        log "‚úÖ Environment configuration generated"
    else
        log "‚ùå Environment configuration generation failed"
        exit 1
    fi
else
    log "‚ö†Ô∏è  Environment config script not found, skipping..."
fi

# Step 16: Send build success email
log "üìß Sending build success notification..."
ARTIFACTS_URL="https://codemagic.io/builds/${CM_BUILD_ID:-unknown}/artifacts"
if [ -f "lib/scripts/utils/send_email.sh" ]; then
    lib/scripts/utils/send_email.sh "build_success" "iOS" "${CM_BUILD_ID:-unknown}" "$ARTIFACTS_URL" || true
fi

log "üéâ iOS build process completed successfully!"
log "üì± IPA file location: output/ios/"

exit 0 