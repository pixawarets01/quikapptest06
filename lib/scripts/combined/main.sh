#!/bin/bash
set -euo pipefail

# Source environment variables
source lib/scripts/utils/gen_env_config.sh

# Initialize logging
log() { echo "[$(date +'%Y-%m-%d %H:%M:%S')] $1"; }

# Error handling with email notification
trap 'handle_error $LINENO $?' ERR

handle_error() {
    local line_no=$1
    local exit_code=$2
    local error_msg="Error occurred at line $line_no. Exit code: $exit_code"
    
    log "‚ùå $error_msg"
    
    # Send build failed email
    if [ -f "lib/scripts/utils/send_email.sh" ]; then
        chmod +x lib/scripts/utils/send_email.sh
        lib/scripts/utils/send_email.sh "build_failed" "Android & iOS" "${CM_BUILD_ID:-unknown}" "$error_msg" || true
    fi
    
    exit $exit_code
}

log "üöÄ Starting Combined Android & iOS build process..."

# Send build started email
if [ -f "lib/scripts/utils/send_email.sh" ]; then
    chmod +x lib/scripts/utils/send_email.sh
    lib/scripts/utils/send_email.sh "build_started" "Android & iOS" "${CM_BUILD_ID:-unknown}" || true
fi

# Create necessary directories
mkdir -p output/android
mkdir -p output/ios

log "üì± Starting Android Build Phase..."

# Memory cleanup and monitoring before Android build
log "üß† Memory cleanup and monitoring before Android build..."
# Clear system caches
sync 2>/dev/null || true
echo 3 > /proc/sys/vm/drop_caches 2>/dev/null || true

# Monitor available memory
if command -v free >/dev/null 2>&1; then
    AVAILABLE_MEM=$(free -m | awk 'NR==2{printf "%.0f", $7}')
    log "üìä Available memory: ${AVAILABLE_MEM}MB"
    
    if [ "$AVAILABLE_MEM" -lt 4000 ]; then
        log "‚ö†Ô∏è  Low memory detected (${AVAILABLE_MEM}MB), performing aggressive cleanup..."
        # Force garbage collection
        java -XX:+UseG1GC -XX:MaxGCPauseMillis=200 -Xmx1G -version 2>/dev/null || true
    fi
fi

# Execute Android build logic
log "üé® Running Android branding script..."
if [ -f "lib/scripts/android/branding.sh" ]; then
    chmod +x lib/scripts/android/branding.sh
    if lib/scripts/android/branding.sh; then
        log "‚úÖ Android branding completed"
        
        # Validate required assets after branding
        log "üîç Validating Android assets..."
        required_assets=("assets/images/logo.png" "assets/images/splash.png")
        for asset in "${required_assets[@]}"; do
            if [ -f "$asset" ] && [ -s "$asset" ]; then
                log "‚úÖ $asset exists and has content"
            else
                log "‚ùå $asset is missing or empty after branding"
                exit 1
            fi
        done
        log "‚úÖ All Android assets validated"
    else
        log "‚ùå Android branding failed"
        exit 1
    fi
else
    log "‚ö†Ô∏è  Android branding script not found, skipping..."
fi

log "‚öôÔ∏è  Running Android customization script..."
if [ -f "lib/scripts/android/customization.sh" ]; then
    chmod +x lib/scripts/android/customization.sh
    if lib/scripts/android/customization.sh; then
        log "‚úÖ Android customization completed"
    else
        log "‚ùå Android customization failed"
        exit 1
    fi
else
    log "‚ö†Ô∏è  Android customization script not found, skipping..."
fi

log "üîí Running Android permissions script..."
if [ -f "lib/scripts/android/permissions.sh" ]; then
    chmod +x lib/scripts/android/permissions.sh
    if lib/scripts/android/permissions.sh; then
        log "‚úÖ Android permissions configured"
    else
        log "‚ùå Android permissions configuration failed"
        exit 1
    fi
else
    log "‚ö†Ô∏è  Android permissions script not found, skipping..."
fi

log "üî• Running Android Firebase script..."
if [ -f "lib/scripts/android/firebase.sh" ]; then
    chmod +x lib/scripts/android/firebase.sh
    if lib/scripts/android/firebase.sh; then
        log "‚úÖ Android Firebase configuration completed"
    else
        log "‚ùå Android Firebase configuration failed"
        exit 1
    fi
else
    log "‚ö†Ô∏è  Android Firebase script not found, skipping..."
fi

log "üîê Running Android keystore script..."
if [ -f "lib/scripts/android/keystore.sh" ]; then
    chmod +x lib/scripts/android/keystore.sh
    if lib/scripts/android/keystore.sh; then
        log "‚úÖ Android keystore configuration completed"
    else
        log "‚ùå Android keystore configuration failed"
        exit 1
    fi
else
    log "‚ö†Ô∏è  Android keystore script not found, skipping..."
fi

log "üèóÔ∏è  Building Android APK..."
# Build with retry logic
log "üèóÔ∏è Attempting Android APK build with memory optimizations..."
BUILD_SUCCESS=false
MAX_RETRIES=3

for attempt in $(seq 1 $MAX_RETRIES); do
    log "üîÑ Android APK build attempt $attempt/$MAX_RETRIES"
    
    if flutter build apk --release --no-tree-shake-icons --target-platform android-arm64,android-arm; then
        log "‚úÖ Android APK build completed successfully on attempt $attempt"
        if [ -f "build/app/outputs/flutter-apk/app-release.apk" ]; then
            cp build/app/outputs/flutter-apk/app-release.apk output/android/
            log "‚úÖ Android APK copied to output directory"
            BUILD_SUCCESS=true
            break
        else
            log "‚ùå Android APK file not found after build"
        fi
    else
        log "‚ùå Android APK build attempt $attempt failed"
        
        if [ $attempt -lt $MAX_RETRIES ]; then
            log "üßπ Cleaning and retrying Android build..."
            flutter clean
            cd android
            ./gradlew --stop --no-daemon || true
            ./gradlew clean --no-daemon --max-workers=1 || true
            cd ..
            
            # Wait for memory to be freed
            sleep 10
            
            # Try with even more aggressive memory settings
            if [ $attempt -eq 2 ]; then
                log "üîß Applying aggressive memory optimizations for Android..."
                export GRADLE_OPTS="-Xmx8G -XX:MaxMetaspaceSize=4G -XX:+UseG1GC -XX:MaxGCPauseMillis=100"
            fi
        fi
    fi
done

if [ "$BUILD_SUCCESS" = false ]; then
    log "‚ùå All Android APK build attempts failed"
    exit 1
fi

# Build AAB if keystore is configured
ANDROID_KEYSTORE_CONFIGURED=false
if [ -f "android/app/src/keystore.properties" ]; then
    ANDROID_KEYSTORE_CONFIGURED=true
    log "üèóÔ∏è  Building Android App Bundle (AAB)..."
    # Build AAB with retry logic
    AAB_BUILD_SUCCESS=false
    MAX_AAB_RETRIES=3

    for attempt in $(seq 1 $MAX_AAB_RETRIES); do
        log "üîÑ Android AAB build attempt $attempt/$MAX_AAB_RETRIES"
        
        if flutter build appbundle --release --no-tree-shake-icons --target-platform android-arm64,android-arm; then
            log "‚úÖ Android AAB build completed successfully on attempt $attempt"
            if [ -f "build/app/outputs/bundle/release/app-release.aab" ]; then
                cp build/app/outputs/bundle/release/app-release.aab output/android/
                log "‚úÖ Android AAB copied to output directory"
                AAB_BUILD_SUCCESS=true
                break
            else
                log "‚ùå Android AAB file not found after build"
            fi
        else
            log "‚ùå Android AAB build attempt $attempt failed"
            
            if [ $attempt -lt $MAX_AAB_RETRIES ]; then
                log "üßπ Cleaning and retrying Android AAB build..."
                flutter clean
                cd android
                ./gradlew --stop --no-daemon || true
                ./gradlew clean --no-daemon --max-workers=1 || true
                cd ..
                
                # Wait for memory to be freed
                sleep 10
                
                # Try with even more aggressive memory settings
                if [ $attempt -eq 2 ]; then
                    log "üîß Applying aggressive memory optimizations for Android AAB..."
                    export GRADLE_OPTS="-Xmx8G -XX:MaxMetaspaceSize=4G -XX:+UseG1GC -XX:MaxGCPauseMillis=100"
                fi
            fi
        fi
    done

    if [ "$AAB_BUILD_SUCCESS" = false ]; then
        log "‚ùå All Android AAB build attempts failed"
        exit 1
    fi
else
    log "‚ö†Ô∏è  Android keystore not configured, skipping AAB build"
fi

log "üîç Verifying Android build signatures..."
if [ -f "lib/scripts/android/verify_signing.sh" ]; then
    chmod +x lib/scripts/android/verify_signing.sh
    if lib/scripts/android/verify_signing.sh; then
        log "‚úÖ Android signature verification completed"
    else
        log "‚ö†Ô∏è  Android signature verification had issues (see logs above)"
    fi
else
    log "‚ö†Ô∏è  Android signature verification script not found, skipping..."
fi

log "üçé Starting iOS Build Phase..."

# Create iOS directories
mkdir -p ios/certificates

# Download iOS certificate files
log "üì• Downloading iOS certificate files..."

# Handle P12 certificate or CER/KEY combination
if [ -n "${CERT_P12_URL:-}" ]; then
    log "Downloading iOS P12 certificate from: $CERT_P12_URL"
    if curl -L -o ios/certificates/cert.p12 "$CERT_P12_URL"; then
        log "‚úÖ iOS P12 certificate downloaded successfully"
    else
        log "‚ùå Failed to download iOS P12 certificate"
        exit 1
    fi
elif [ -n "${CERT_CER_URL:-}" ] && [ -n "${CERT_KEY_URL:-}" ]; then
    log "Downloading iOS certificate from: $CERT_CER_URL"
    if curl -L -o ios/certificates/cert.cer "$CERT_CER_URL"; then
        log "‚úÖ iOS certificate downloaded successfully"
    else
        log "‚ùå Failed to download iOS certificate"
        exit 1
    fi
    
    log "Downloading iOS private key from: $CERT_KEY_URL"
    if curl -L -o ios/certificates/cert.key "$CERT_KEY_URL"; then
        log "‚úÖ iOS private key downloaded successfully"
    else
        log "‚ùå Failed to download iOS private key"
        exit 1
    fi
else
    log "‚ùå Either CERT_P12_URL or both CERT_CER_URL and CERT_KEY_URL are required for iOS signing"
    exit 1
fi

if [ -n "${PROFILE_URL:-}" ]; then
    log "Downloading iOS provisioning profile from: $PROFILE_URL"
    if curl -L -o ios/certificates/profile.mobileprovision "$PROFILE_URL"; then
        log "‚úÖ iOS provisioning profile downloaded successfully"
    else
        log "‚ùå Failed to download iOS provisioning profile"
        exit 1
    fi
else
    log "‚ùå PROFILE_URL is required for iOS signing"
    exit 1
fi

# Validate required iOS variables
log "üîç Validating required iOS variables..."
required_ios_vars=(
    "CERT_PASSWORD"
    "APPLE_TEAM_ID"
    "APNS_KEY_ID"
    "APNS_AUTH_KEY_URL"
    "APP_STORE_CONNECT_KEY_IDENTIFIER"
)

for var in "${required_ios_vars[@]}"; do
    if [ -z "${!var:-}" ]; then
        log "‚ùå Required iOS variable $var is missing"
        exit 1
    fi
done

# Process iOS certificates
log "üîê Processing iOS certificates..."
if [ -f "ios/certificates/cert.p12" ]; then
    log "‚úÖ P12 certificate already available, skipping conversion"
elif [ -f "ios/certificates/cert.cer" ] && [ -f "ios/certificates/cert.key" ]; then
    log "Converting CER and KEY to P12..."
    if [ -f "lib/scripts/ios/certificate_handler.sh" ]; then
        chmod +x lib/scripts/ios/certificate_handler.sh
        if lib/scripts/ios/certificate_handler.sh \
            "ios/certificates/cert.cer" \
            "ios/certificates/cert.key" \
            "$CERT_PASSWORD" \
            "ios/certificates/cert.p12"; then
            log "‚úÖ iOS certificate processing completed"
        else
            log "‚ùå iOS certificate processing failed"
            exit 1
        fi
    else
        log "‚ùå iOS certificate handler script not found"
        exit 1
    fi
else
    log "‚ùå Neither P12 nor CER/KEY files found"
    exit 1
fi

# Install iOS provisioning profile
log "üì± Installing iOS provisioning profile..."
if [ -f "ios/certificates/profile.mobileprovision" ]; then
    mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles/
    cp ios/certificates/profile.mobileprovision ~/Library/MobileDevice/Provisioning\ Profiles/
    log "‚úÖ iOS provisioning profile installed"
else
    log "‚ùå iOS provisioning profile not found"
    exit 1
fi

# Download APNS auth key
log "üîë Downloading APNS auth key..."
if [ -n "${APNS_AUTH_KEY_URL:-}" ]; then
    if curl -L -o ios/certificates/AuthKey_${APNS_KEY_ID}.p8 "$APNS_AUTH_KEY_URL"; then
        log "‚úÖ APNS auth key downloaded"
    else
        log "‚ùå Failed to download APNS auth key"
        exit 1
    fi
else
    log "‚ùå APNS_AUTH_KEY_URL is required"
    exit 1
fi

# Execute iOS build logic
log "üé® Running iOS branding script..."
if [ -f "lib/scripts/ios/branding.sh" ]; then
    chmod +x lib/scripts/ios/branding.sh
    if lib/scripts/ios/branding.sh; then
        log "‚úÖ iOS branding completed"
        
        # Validate required assets after branding
        log "üîç Validating iOS assets..."
        required_assets=("assets/images/logo.png" "assets/images/splash.png")
        for asset in "${required_assets[@]}"; do
            if [ -f "$asset" ] && [ -s "$asset" ]; then
                log "‚úÖ $asset exists and has content"
            else
                log "‚ùå $asset is missing or empty after branding"
                exit 1
            fi
        done
        log "‚úÖ All iOS assets validated"
    else
        log "‚ùå iOS branding failed"
        exit 1
    fi
else
    log "‚ö†Ô∏è  iOS branding script not found, skipping..."
fi

log "‚öôÔ∏è  Running iOS customization script..."
if [ -f "lib/scripts/ios/customization.sh" ]; then
    chmod +x lib/scripts/ios/customization.sh
    if lib/scripts/ios/customization.sh; then
        log "‚úÖ iOS customization completed"
    else
        log "‚ùå iOS customization failed"
        exit 1
    fi
else
    log "‚ö†Ô∏è  iOS customization script not found, skipping..."
fi

log "üîí Running iOS permissions script..."
if [ -f "lib/scripts/ios/permissions.sh" ]; then
    chmod +x lib/scripts/ios/permissions.sh
    if lib/scripts/ios/permissions.sh; then
        log "‚úÖ iOS permissions configured"
    else
        log "‚ùå iOS permissions configuration failed"
        exit 1
    fi
else
    log "‚ö†Ô∏è  iOS permissions script not found, skipping..."
fi

log "üì± Setting iOS deployment target..."
if [ -f "lib/scripts/ios/deployment_target.sh" ]; then
    chmod +x lib/scripts/ios/deployment_target.sh
    if lib/scripts/ios/deployment_target.sh; then
        log "‚úÖ iOS deployment target set"
    else
        log "‚ùå iOS deployment target setting failed"
        exit 1
    fi
else
    log "‚ö†Ô∏è  iOS deployment target script not found, skipping..."
fi

log "üî• Running iOS Firebase script..."
if [ -f "lib/scripts/ios/firebase.sh" ]; then
    chmod +x lib/scripts/ios/firebase.sh
    if lib/scripts/ios/firebase.sh; then
        log "‚úÖ iOS Firebase configuration completed"
    else
        log "‚ùå iOS Firebase configuration failed"
        exit 1
    fi
else
    log "‚ö†Ô∏è  iOS Firebase script not found, skipping..."
fi

# Update Podfile for Firebase compatibility (avoid duplication)
log "üì¶ Updating Podfile for Firebase compatibility..."
if [ -f "ios/Podfile" ]; then
    # Check if Firebase settings already exist
    if ! grep -q "Firebase compatibility settings" ios/Podfile; then
        cat >> ios/Podfile << 'EOF'

# Firebase compatibility settings
post_install do |installer|
  installer.pods_project.targets.each do |target|
    target.build_configurations.each do |config|
      config.build_settings['IPHONEOS_DEPLOYMENT_TARGET'] = '13.0'
      config.build_settings['ENABLE_BITCODE'] = 'NO'
      config.build_settings['SWIFT_VERSION'] = '5.0'
      config.build_settings['CLANG_WARN_QUOTED_INCLUDE_IN_FRAMEWORK_HEADER'] = 'NO'
    end
  end
end
EOF
        log "‚úÖ Podfile updated with Firebase settings"
    else
        log "‚úÖ Podfile already contains Firebase settings"
    fi
else
    log "‚ùå Podfile not found"
    exit 1
fi

# Flutter setup for iOS
log "üì¶ Setting up Flutter for iOS..."
flutter clean
flutter pub get

# Memory cleanup and monitoring before iOS build
log "üß† Memory cleanup and monitoring before iOS build..."
# Clear system caches
sync 2>/dev/null || true
echo 3 > /proc/sys/vm/drop_caches 2>/dev/null || true

# Monitor available memory
if command -v free >/dev/null 2>&1; then
    AVAILABLE_MEM=$(free -m | awk 'NR==2{printf "%.0f", $7}')
    log "üìä Available memory: ${AVAILABLE_MEM}MB"
    
    if [ "$AVAILABLE_MEM" -lt 4000 ]; then
        log "‚ö†Ô∏è  Low memory detected (${AVAILABLE_MEM}MB), performing aggressive cleanup..."
        # Force garbage collection
        java -XX:+UseG1GC -XX:MaxGCPauseMillis=200 -Xmx1G -version 2>/dev/null || true
    fi
fi

# Install pods
log "üì¶ Installing CocoaPods dependencies..."
cd ios
if pod install --repo-update; then
    log "‚úÖ CocoaPods dependencies installed"
else
    log "‚ùå CocoaPods installation failed"
    exit 1
fi
cd ..

# Build iOS app
log "üèóÔ∏è  Building iOS app..."

# Determine if we should build signed or unsigned
IOS_BUILD_SIGNED=true
if ! security find-identity -v -p codesigning build.keychain 2>/dev/null | grep -q "iPhone Distribution"; then
    log "‚ö†Ô∏è  No valid iOS signing identity found, attempting unsigned build"
    IOS_BUILD_SIGNED=false
fi

# Create export options plist
cat > ios/ExportOptions.plist << EOF
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
    <key>method</key>
    <string>${PROFILE_TYPE:-app-store}</string>
    <key>teamID</key>
    <string>$APPLE_TEAM_ID</string>
    <key>signingStyle</key>
    <string>manual</string>
    <key>provisioningProfiles</key>
    <dict>
        <key>$BUNDLE_ID</key>
        <string>$(basename ios/certificates/profile.mobileprovision .mobileprovision)</string>
    </dict>
    <key>compileBitcode</key>
    <false/>
    <key>uploadBitcode</key>
    <false/>
    <key>uploadSymbols</key>
    <false/>
</dict>
</plist>
EOF

# Setup iOS keychain and certificates
log "üîê Setting up iOS keychain..."
security create-keychain -p "" build.keychain
security default-keychain -s build.keychain
security unlock-keychain -p "" build.keychain
security set-keychain-settings -t 3600 -u build.keychain

# Import P12 certificate
log "üì• Importing P12 certificate to keychain..."
if security import ios/certificates/cert.p12 -k build.keychain -P "$CERT_PASSWORD" -A; then
    log "‚úÖ P12 certificate imported successfully"
    security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k "" build.keychain
else
    log "‚ùå Failed to import P12 certificate"
    exit 1
fi

# Build the iOS app
cd ios

# Clean previous builds
rm -rf build/Runner.xcarchive
rm -rf build/ios/ipa

# Build with retry logic
log "üèóÔ∏è Attempting iOS build with memory optimizations..."
BUILD_SUCCESS=false
MAX_RETRIES=3

for attempt in $(seq 1 $MAX_RETRIES); do
    log "üîÑ iOS build attempt $attempt/$MAX_RETRIES"
    
    if [ "$IOS_BUILD_SIGNED" = true ]; then
        log "Building iOS with code signing..."
        if xcodebuild -workspace Runner.xcworkspace -scheme Runner -configuration Release -destination generic/platform=iOS -archivePath build/Runner.xcarchive archive | xcpretty; then
            log "‚úÖ iOS archive created successfully"
            
            if xcodebuild -exportArchive -archivePath build/Runner.xcarchive -exportPath build/ios/ipa -exportOptionsPlist ExportOptions.plist | xcpretty; then
                log "‚úÖ iOS IPA exported successfully"
                if [ -f "build/ios/ipa/Runner.ipa" ]; then
                    cp build/ios/ipa/Runner.ipa ../output/ios/
                    log "‚úÖ IPA copied to output directory"
                    BUILD_SUCCESS=true
                    break
                else
                    log "‚ùå IPA file not found after export"
                fi
            else
                log "‚ùå iOS IPA export failed"
            fi
        else
            log "‚ùå iOS archive creation failed"
        fi
    else
        log "Building iOS without code signing..."
        if flutter build ios --release --no-codesign; then
            log "‚úÖ iOS unsigned build completed"
            # Create a simple IPA structure for unsigned build
            mkdir -p Payload/Runner.app
            cp -r build/ios/Release-iphoneos/Runner.app Payload/
            zip -r ../output/ios/Runner-unsigned.ipa Payload/
            rm -rf Payload
            BUILD_SUCCESS=true
            break
        else
            log "‚ùå iOS unsigned build failed"
        fi
    fi
    
    if [ $attempt -lt $MAX_RETRIES ]; then
        log "üßπ Cleaning and retrying iOS build..."
        # Clean build artifacts
        rm -rf build/Runner.xcarchive
        rm -rf build/ios/ipa
        
        # Wait for memory to be freed
        sleep 10
        
        # Try with reduced parallel jobs on retry
        if [ $attempt -eq 2 ]; then
            log "üîß Applying aggressive memory optimizations for iOS..."
            export XCODE_PARALLEL_JOBS=2
        fi
    fi
done

if [ "$BUILD_SUCCESS" = false ]; then
    log "‚ùå All iOS build attempts failed"
    cd ..
    exit 1
fi
cd ..

# Generate environment config
log "‚öôÔ∏è  Generating environment configuration..."
if [ -f "lib/scripts/utils/gen_env_config.sh" ]; then
    chmod +x lib/scripts/utils/gen_env_config.sh
    if lib/scripts/utils/gen_env_config.sh; then
        log "‚úÖ Environment configuration generated"
    else
        log "‚ùå Environment configuration generation failed"
        exit 1
    fi
else
    log "‚ö†Ô∏è  Environment config script not found, skipping..."
fi

# Send build success email
log "üìß Sending build success notification..."
ARTIFACTS_URL="https://codemagic.io/builds/${CM_BUILD_ID:-unknown}/artifacts"
if [ -f "lib/scripts/utils/send_email.sh" ]; then
    lib/scripts/utils/send_email.sh "build_success" "Android & iOS" "${CM_BUILD_ID:-unknown}" "$ARTIFACTS_URL" || true
fi

log "üéâ Combined Android & iOS build process completed successfully!"
log "üì± Android APK file location: output/android/app-release.apk"
if [ "$ANDROID_KEYSTORE_CONFIGURED" = true ]; then
    log "üì¶ Android AAB file location: output/android/app-release.aab"
fi
log "üçé iOS IPA file location: output/ios/"

exit 0 